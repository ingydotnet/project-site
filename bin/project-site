#!/usr/bin/env bash

VERSION=0.0.3

root=$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd) || exit

export PATH=$(find "$root/ext" -name bin -o -name lib | tr '\n' :)$PATH

source bash+ :std

use Getopt

GETOPT_SPEC="\
  $(basename "$0") <options...> [<project-site-dir>...]

See 'man project-site' for more help.

Common commands:

  project-site --new my-site/

Options:
--
new           Create a new project-site web site
build         Build the project-site
local         Start a local web server for the site
publish       Publish your web site
make-branch=  Create a publishing branch (eg gh-pages)
shell         Start a shell in the builder container
builders      List builders available
version       Print the project-site version
help          Show the command summary
 
i,input=      Input/Source/Content directory
o,output=     Output/Build/Publish directory
b,builder=    Builder to use (see --builders)
p,port=       Port to run local server on
v,verbose     Show more output
 
x,debug       Print lots of debugging info
"

main() {
  get-options "$@"

  "command:$cmd" "${arguments[@]}"
}

command:new() (
  dir=$(abs-path "${1:-.}")

  if [[ -e $dir ]]; then
    [[ -d $dir ]] ||
      error "'$dir' is not a directory"
    [[ ! $(\ls -A "$dir" | grep -v '^\.git$') ]] ||
      error "New project-site dir '$dir' must be empty"
  else
    mkdir -p "$dir"
  fi

  [[ $PROJECT_SITE_ROOT ]] ||
    error "The 'project-site' command was not installed properly"

  (
    set -x
    cp "$PROJECT_SITE_ROOT/share/ReadMe.md" "$dir"
    cp "$PROJECT_SITE_ROOT/share/Makefile" "$dir"
    cp -r "$PROJECT_SITE_ROOT/share/src" "$dir"
  )

  echo "New project-site created in '$dir/'"
)

command:build() (
  check-options +input +output +builder

  mkdir -p "$option_output"

  docker-run ps-build
)

command:local() (
  check-options +input +builder

  unset option_output

  docker-run ps-local
)

command:publish() (
  check-options +output

  [[ -d $option_output ]] ||
    error "The --output directory '$option_output' does not exist"
  [[ -e $option_output/.git ]] ||
    error "The --output directory '$option_output' is not a git working directory"

  command:build "$@"

  if [[ ${PROJECT_SITE_CNAME-} ]]; then
    if [[ $PROJECT_SITE_CNAME == none ]]; then
      rm -f "$option_output/CNAME"
    else
      echo "$PROJECT_SITE_CNAME" > "$option_output/CNAME"
    fi
  fi

  (
    set -x
    cd "$option_output"
    git add -A .
    git commit -m "$(date)"
    git push
  )

  echo
  echo "Your site has been published to the internet."
  if [[ -e $option_output/CNAME ]]; then
    domain=$(cat "$option_output/CNAME")
    echo "Visit https://$domain/"
    return
  fi

  github_url=$(git config --get remote.origin.url) || true
  [[ $github_url ]] || return 0
  github_path=${github_url%.git}
  github_path=${github_path#https://github.com/}
  github_path=${github_path#git@github.com:}
  github_user=${github_path%/*}
  github_repo=${github_path#*/}

  echo "Visit https://$github_user.github.io/$github_repo/"
)

command:make-branch() (
  branch=$option_make_branch

  git rev-parse &>/dev/null ||
    error "Not in a git repository directory"

  git rev-parse HEAD &>/dev/null ||
    error "There are no commits in this git repository"

  git rev-parse --verify --quiet "$branch" >/dev/null &&
    error "Branch '$branch' already exists"

  (git diff --quiet && git diff --cached --quiet) ||
    error "Can't make-branch with uncommitted changes"

  remote=$(git remote show)
  [[ $remote ]] ||
    error "This git repository has no remote"

  [[ $(git config --get "remote.$remote.url") ]] ||
    error "The git remote '$remote' has no upstream url"

  curr_branch=$(git rev-parse --abbrev-ref HEAD)
  temp_branch=temp-branch-$(date +%s)
  git branch "$temp_branch" HEAD

  temp_dir=$(mktemp -d)
  dir=$temp_dir/$branch

  git worktree add --quiet "$dir" "$temp_branch"
  (
    cd "$dir"
    git checkout --quiet --orphan "$branch"

    git rm -fr --quiet .
    touch .project-site-build
    git add -A .
    git commit --quiet -m 'Initial commit'
  )
  git checkout --quiet "$curr_branch"
  rm -fr "$temp"
  git worktree prune
  git branch --quiet -D "$temp_branch"

  echo "Created branch '$branch' for publishing your project-site"
)

command:shell() (
  check-options

  hist=/tmp/project-site-history

  touch $hist

  options=(
    --volume "$hist:/home/node/.bash_history"
  )

  docker-run "${1:-tmux}"
)

command:builders() (
  cat <<...
Use one of these builders:

  * bootstrap45 - See: https://getbootstrap.com/docs/4.5/

...
)

command:version() (
  echo "project-site v$VERSION"
)

docker-run() (
  cmd=$1

  options+=(
    --publish "$option_port:$option_port"
    --user "$(id -u $USER):$(id -g $USER)"
  )
  if [[ $option_input ]]; then
    options+=(--volume $option_input:/input)
  fi
  if [[ $option_output ]]; then
    [[ -d $option_output ]] ||
      mkdir -p "$option_output"
    touch "$option_output/.project-site-build"
    options+=(--volume $option_output:/output)
  fi
  if [[ $option_builder ]]; then
    base_name=base-$option_builder
    base_dir=$root/$base_name
    if [[ ! -d $base_dir ]]; then
      (
        cd "$root"
        git branch --track "$base_name" "origin/$base_name" \
          2>/dev/null || true
        git worktree add -f "$base_name" "$base_name"
      )
    fi
    (
      cd "$base_dir"
      git reset --hard
      git clean -dxf
    )
    options+=(--volume "$base_dir:/builder")
  fi
  if [[ $option_port ]]; then
    options+=(--env "PROJECT_SITE_PORT=$option_port")
  fi
  if [[ $PROJECT_SITE_BASEURL ]]; then
    options+=(--env "PROJECT_SITE_BASEURL=$PROJECT_SITE_BASEURL")
  fi

  set -x
  docker run -it --rm \
    "${options[@]}" \
    "$docker_image" \
    bash -c "$cmd"
)

check-options() {
  for arg; do
    if [[ $arg == +* ]]; then
      option=option_${arg#+}
      if [[ ! ${!option} ]]; then
        if [[ $option == input ]]; then
          option_input=$PWD
          continue
        fi
        error "No --builder=... option specified"
      fi
    fi
  done
}

get-options() {
  GETOPT_ARGS='@arguments' getopt "$@"

  $option_debug && set -x

  option_unknown=true
  if [[ $option_make_branch ]]; then
    [[ $option_make_branch =~ ^[[:alnum:]]+(-[[:alnum:]]+)$ ]] ||
      error "Invalid branch name '$option_make_branch'"
    cmd=make-branch
  else
    for cmd in new build local shell publish builders version unknown; do
      option=option_$cmd
      ! ${!option} || break
    done
  fi
  [[ $cmd != unknown ]] ||
    error "No command option specified"

  [[ $option_input ]] &&
    option_input=$(abs-path "$option_input")
  [[ $option_output ]] &&
    option_output=$(abs-path "$option_output")
  [[ $option_port ]] ||
    option_port=12345

  if [[ $option_builder && ! $option_builder =~ (bootstrap45) ]]; then
    error "Invalid value --builder='$option_builder'." \
      "Try --builders to list builders."
  fi

  docker_image=projectsite/ps-builder-bootstrap45:$VERSION

  options=()
}

abs-path () (
  if [[ -d $1 ]]; then
    cd "$1"
    pwd
    return
  fi
  case "$1" in
    /*) echo "$1";;
    *) echo "$PWD/$1";;
  esac
)

error() {
  die "Error: $*\n"
}

[[ $0 != "${BASH_SOURCE[0]}" ]] || main "$@"

# vim: lisp ft=sh:
